// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider = "prisma-client-js"
    previewFeatures = ["jsonProtocol"]
}

datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
    relationMode = "prisma"
}

model User {
    id        Int   @id @default(autoincrement())
    username String
    game Game @relation(fields: [gameId], references: [id])
    gameId Int
    alive Boolean @default(true)
    votes Votes[] @relation("user")
    targetVotes Votes[] @relation("target")
    userMoves Actions[] @relation("moveUser")
    targetMoves Actions[] @relation("moveTarget")
    drinks Drinks[]
    events Events[]
    role Roles @relation(fields: [roleId], references: [role])
    roleId Role @default(UNASSIGNED)
    @@unique([username, gameId])
    @@index([gameId])
    @@index([roleId])
}

model Roles {
    role Role @id
    team Team
    users User[]
}

enum Role {
    MAFIA_KILLING
    MAFIA
    DETECTIVE
    DOCTOR
    TOWNSPERSON
    UNASSIGNED
}

enum Team {
    MAFIA
    TOWN
    UNASSIGNED
}

enum GameState {
    LOBBY
    RUNNING
    FINISHED
}

enum DayStage {
    DAY
    VOTING
    NIGHT
}

enum GameOutcome {
    MAFIA
    TOWN
}

model Game {
    id        Int   @id @default(autoincrement())
    createdAt DateTime @default(now())
    code     Int   @unique
    users User[]
    moves Actions[]
    state GameState @default(LOBBY) // LOBBY, RUNNING, FINISHED
    day Int @default(1)
    stage DayStage @default(DAY) // DAY, VOTING, NIGHT
    votes Votes[]
    events Events[]
    drinks Drinks[]
    outcome GameOutcome?
}

model Votes {
    game Game @relation(fields: [gameId], references: [id])
    gameId Int
    user User @relation(name: "user",fields: [userId], references: [id])
    userId Int
    target User @relation(name: "target", fields: [targetId], references: [id])
    targetId Int
    day Int @default(1)
    @@unique([userId, day, gameId])
    @@index([gameId])
    @@index([targetId])
}

enum EventType {
    KILLED
    HUNG
    ANNOUNCEMENT
    INVESTIGATED
    SAVED
}

model Events {
    id Int @id @default(autoincrement())
    game Game @relation(fields: [gameId], references: [id])
    gameId Int
    day Int
    stage DayStage
    targetId Int?
    target User? @relation(fields: [targetId], references: [id])
    type EventType
    description String
    drinkId Int?
    drink Drinks? @relation(fields: [drinkId], references: [id])
    actions Actions[]
    @@index([gameId])
    @@index([targetId])
    @@index([drinkId])
}


enum ActionTypes {
    KILL
    HEAL
    INVESTIGATE
}
model Actions {
    id Int @id @default(autoincrement())
    game Game @relation(fields: [gameId], references: [id])
    gameId Int
    day Int
    stage DayStage
    userId Int
    user User @relation("moveUser", fields: [userId], references: [id])
    targetId Int
    target User @relation("moveTarget", fields: [targetId], references: [id])
    eventId Int?
    event Events? @relation(fields: [eventId], references: [id])
    type ActionTypes
    @@unique([day, gameId, type])
    @@index([gameId])
    @@index([targetId])
    @@index([userId])
    @@index([eventId])
}

model Drinks {
    id Int @id @default(autoincrement())
    game Game @relation(fields: [gameId], references: [id])
    gameId Int
    day Int
    stage DayStage
    targetId Int
    target User @relation(fields: [targetId], references: [id])
    amount Int @default(0)
    events Events[]

    @@unique([day, stage, gameId, targetId])
    @@index([gameId])
    @@index([targetId])
}